import { createSlice } from '@reduxjs/toolkit';
import { loadState } from '@/utils/state';

const Steps = {
    HOME_ARM: 'HOME_ARM',
    MOVE_JOINT_3: 'MOVE_JOINT_3',
    ADD_MOVE_TO_ACTION_LIST: 'ADD_MOVE_TO_ACTION_LIST',
};

const evaluateStepMap = {
    [Steps.HOME_ARM]: state => {
        // The state passed holds all the store state
        const armpose = state.armPose;
        if (armpose === null) {
            return false;
        }
        return armpose.isHomed;
    },
    [Steps.MOVE_JOINT_3]: state => {
        const armPose = state.armPose;
    },
    [Steps.ADD_MOVE_TO_ACTION_LIST]: state => {
        // The state passed holds all the store state
        return true;
    },
};

const initialState = {
    steps: [
        {
            name: 'Home the arm',
            id: 0,
            description: 'Home the arm',
            completion: {
                done: false,
                timestamp: null,
            },
        },
        {
            name: 'Move joint 3',
            id: 1,
            description: 'Go to the control panel and move joint 3',
            completion: {
                done: false,
                timestamp: null,
            },
        },
        {
            name: 'Add Move to action list',
            id: 2,
            description: 'Add the move to the action list',
            completion: {
                done: false,
                timestamp: null,
            },
        },
    ],
};

const loadedState = loadState()?.activity;

if (loadedState && loadedState.steps) {
    initialState.steps = loadedState.steps;
}
const ActivitySlice = createSlice({
    name: 'activity',
    initialState,
    reducers: {},
});

export const currentStepSelector = state =>
    state.activity.steps?.find(step => !step.completion.done);

export const activityActions = ActivitySlice.actions;
export default ActivitySlice.reducer;
